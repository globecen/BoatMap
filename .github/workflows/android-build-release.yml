name: Build et Release Android

on:
  push:
    branches:
      - master  # Changez cela par le nom de votre branche principale

permissions:
  contents: write  # Ajouter la permission d'écriture pour les contenus

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Récupérer le code
        uses: actions/checkout@v2

      - name: Configurer le JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Utiliser Java 17
          distribution: 'adopt'

      - name: Configurer l'Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 30  # Ajuster le niveau de l'API selon vos besoins
          build-tools: 30.0.3  # Ajuster la version des outils de compilation selon vos besoins

      - name: Compiler et packager l'application Android
        run: |
          chmod +x ./gradlew
          ./gradlew assembleRelease
        working-directory: ./  # Supposant que gradlew est dans le répertoire racine

      - name: Vérifier l'APK généré
        run: |
          if [ ! -f app/build/outputs/apk/release/app-release.apk ]; then
            echo "APK not found!"
            exit 1
          fi

      - name: Obtenir la version de l'application
        id: get_version_name
        run: |
          VERSION_NAME=$(grep 'versionName' app/build.gradle | sed -n 's/.*"\(.*\)".*/\1/p')
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Créer un tag et une release GitHub via l'API
        id: create_tag_and_release
        run: |
          TAG_NAME="v${{ env.VERSION_NAME }}"
          RELEASE_NAME="Release ${{ env.VERSION_NAME }}"
          REQUEST_BODY=$(jq -n --arg tag_name "$TAG_NAME" --arg target_commitish "$GITHUB_SHA" --arg name "$RELEASE_NAME" --arg body "Automated release for version $TAG_NAME" '{ tag_name: $tag_name, target_commitish: $target_commitish, name: $name, body: $body, draft: false, prerelease: false }')
          RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d "$REQUEST_BODY" "https://api.github.com/repos/${{ github.repository }}/releases")
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r .upload_url | sed -e "s/{?name,label}//")
          if [ "$UPLOAD_URL" == "null" ]; then
            echo "Failed to get upload URL"
            exit 1
          fi
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Télécharger l'APK sur la release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: app-release-${{ env.VERSION_NAME }}.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
